public static bool StageLibraryFloorModel_AddUnitDefault(StageLibraryFloorModel __instance, StageModel stage, LibraryFloorModel floor, ref UnitDataModel data)
        {
            if (data.isSephirah && stage.ClassInfo.id == new LorId(packageId, 1) && floor.Sephirah == SephirahType.Hod)
            {
                UnitDataModel unitDataModel = new UnitDataModel(9100501, floor.Sephirah, true);
                unitDataModel.SetTemporaryPlayerUnitByBook(9100501);
                unitDataModel.bookItem.equipeffect.PassiveList.Remove(unitDataModel.bookItem.equipeffect.PassiveList.Find((LorId x) => x == new LorId(1005015)));
                unitDataModel.isSephirah = true;
                unitDataModel.SetCustomName(Singleton<CharactersNameXmlList>.Instance.GetName(40));
                unitDataModel.forceItemChangeLock = true;
                data = unitDataModel;
            }
            return true;
        }

        method = typeof(OldSamuraiInit).GetMethod("StageLibraryFloorModel_AddUnitDefault");
            harmony.Patch(typeof(StageLibraryFloorModel).GetMethod("AddUnitDefault", AccessTools.all), new HarmonyMethod(method), null, null, null, null);

            private void DestroyAura()
        {
            if (_aura != null && _aura.gameObject != null)
            {
                UnityEngine.Object.Destroy(_aura.gameObject);
            }
            _aura = null;
        }

        //private CreatureDlgEffectUI _dlgEffect;
        //private List<string> _dlgIdList = new List<string>();
        //private int _dlgIdx;
        //private int _min;
        //private int _max;
        //private int _lastRnd;
        //private bool _phaseChanged;

        //public void Init(int mn, int mx)
        //{
        //    _lastRnd = -1;
        //    _min = mn;
        //    _max = mx;
        //    _dlgIdx = 0;
        //    // Phase 2
        //    _dlgIdList.Add("This isn't how it should ended!");
        //    _dlgIdList.Add("Ahhhh!!!");
        //    _dlgIdList.Add("Father, I'll not forgive you...");
        //    _dlgIdList.Add("No one will stand in my way!");
        //    CreateDialog();
        //    Debug.LogError(SingletonBehavior<BattleSceneRoot>.Instance.currentMapObject == this);
        //    SingletonBehavior<CreatureDlgManagerUI>.Instance.Init(SingletonBehavior<BattleSceneRoot>.Instance.currentMapObject == this);
        //    _phaseChanged = true;
        //}
        //public void CreateDialog()
        //{
        //    var rnd = new System.Random();
        //    _dlgIdx = rnd.Next(_min, _max);
        //    while (_lastRnd == _dlgIdx && _lastRnd != -1)
        //    {
        //        _dlgIdx = rnd.Next(_min, _max);
        //    }
        //    var text = _dlgIdList[_dlgIdx];
        //    if (_dlgEffect != null && _dlgEffect.gameObject != null)
        //    {
        //        _dlgEffect.FadeOut();
        //    }
        //    _dlgEffect = SingletonBehavior<CreatureDlgManagerUI>.Instance.SetDlg(text);
        //    _lastRnd = _dlgIdx;
        //}
        //public override void OnRoundStart()
        //{
        //    base.OnRoundStart();
        //    Debug.LogError(SingletonBehavior<BattleSceneRoot>.Instance.currentMapObject == this);
        //    if (_phaseChanged)
        //        SingletonBehavior<CreatureDlgManagerUI>.Instance.Init(SingletonBehavior<BattleSceneRoot>.Instance.currentMapObject == this);
        //}

        if (!(mapObject.AddComponent(model.MapManagerType) is MapManager newManager)) return null;
        //CustomMapHandler.InitCustomMap("Hayate", new HayateMapManager(), false, true, 0.5f, 0.3f, 0.5f, 0.8f);

        //public static bool KeywordListUI_Init(KeywordListUI __instance, DiceCardXmlInfo cardInfo,
        //    IEnumerable<DiceBehaviour> behaviourList)
        //{
        //    if (cardInfo.id.packageId != PackageId) return true;
        //    var array = (KeywordUI[]) __instance.GetType().GetField("keywordList", AccessTools.all)
        //        ?.GetValue(__instance);
        //    if (array == null) return true;
        //    foreach (var t in array) t.gameObject.SetActive(false);
        //    var dictionary = new Dictionary<string, int>();
        //    if (!_keywordCalled)
        //    {
        //        _cardKeywords = UnitUtilities.GetCardKeywordListXml();
        //        _keywordCalled = true;
        //    }

        //    var cardKeywords = _cardKeywords;
        //    if (cardKeywords == null) return true;

        //    var num = 0;
        //    if (!dictionary.ContainsKey("ModPack21341Init6"))
        //    {
        //        dictionary.Add("ModPack21341Init6", 1);
        //        array[num].Init(_cardKeywords["ModPack21341Init6"][0], _cardKeywords["ModPack21341Init6"][1]);
        //        num++;
        //    }
        //    UnitUtilities.AddOriginalAbilitiesKeywords(__instance, array, dictionary, cardInfo, behaviourList, num);
        //    return false;
        //}

        //method = typeof(ModPack21341Init).GetMethod("KeywordListUI_Init");
        //harmony.Patch(typeof(KeywordListUI).GetMethod("Init", AccessTools.all), new HarmonyMethod(method));

        public static void AddOriginalAbilitiesKeywords(KeywordListUI instance, KeywordUI[] array,
            Dictionary<string, int> dictionary, DiceCardXmlInfo cardInfo, IEnumerable<DiceBehaviour> behaviourList,
            int num)
        {
            foreach (var text in cardInfo.Keywords)
            {
                var effectTextName = Singleton<BattleEffectTextsXmlList>.Instance.GetEffectTextName(text);
                if (effectTextName == "") continue;
                dictionary.Add(text, 1);
                array[num].Init(effectTextName, Singleton<BattleEffectTextsXmlList>.Instance.GetEffectTextDesc(text));
                num++;
            }

            var abilityKeywords = Singleton<BattleCardAbilityDescXmlList>.Instance.GetAbilityKeywords(cardInfo);
            for (var j = 0; j < abilityKeywords.Count; j++)
                if (j >= array.Length)
                {
                    Debug.LogError("Keywordcount over" + j);
                }
                else if (Singleton<BattleEffectTextsXmlList>.Instance.GetEffectTextName(abilityKeywords[j]) != "" &&
                         !dictionary.ContainsKey(abilityKeywords[j]))
                {
                    dictionary.Add(abilityKeywords[j], 1);
                    array[num].Init(Singleton<BattleEffectTextsXmlList>.Instance.GetEffectTextName(abilityKeywords[j]),
                        Singleton<BattleEffectTextsXmlList>.Instance.GetEffectTextDesc(abilityKeywords[j]));
                    num++;
                }

            foreach (var abilityKeywords_byScript in behaviourList.Select(diceBehaviour =>
                Singleton<BattleCardAbilityDescXmlList>.Instance.GetAbilityKeywords_byScript(diceBehaviour.Script)))
                for (var k = 0; k < abilityKeywords_byScript.Count; k++)
                    if (k >= array.Length)
                    {
                        Debug.LogError("Keywordcount over" + k);
                    }
                    else
                    {
                        if (num >= array.Length ||
                            Singleton<BattleEffectTextsXmlList>.Instance
                                .GetEffectTextDesc(abilityKeywords_byScript[k]) == "") break;

                        if (dictionary.ContainsKey(abilityKeywords_byScript[k]) ||
                            Singleton<BattleEffectTextsXmlList>.Instance
                                .GetEffectTextName(abilityKeywords_byScript[k]) == "") continue;
                        dictionary.Add(abilityKeywords_byScript[k], 1);
                        array[num].Init(
                            Singleton<BattleEffectTextsXmlList>.Instance.GetEffectTextName(abilityKeywords_byScript[k]),
                            Singleton<BattleEffectTextsXmlList>.Instance
                                .GetEffectTextDesc(abilityKeywords_byScript[k]));
                        num++;
                    }
        }
        public static Dictionary<string, List<string>> GetCardKeywordListXml()
        {
            Dictionary<string, List<string>> result;
            try
            {
                var dictionary = new Dictionary<string, List<string>>();
                var xmlDocument = new XmlDocument();
                var filename = ModPack21341Init.Path + "/CardKeywords/CardKeyword.xml";
                xmlDocument.Load(filename);
                var xmlNode = xmlDocument.SelectNodes("CardKeywordsRoot")?[0];
                foreach (var obj in xmlNode.SelectNodes("Card"))
                {
                    var xmlNode2 = (XmlNode) obj;
                    var list = (from XmlNode xmlNode3 in xmlNode2 select xmlNode3.InnerText).ToList();
                    var xmlAttribute = xmlNode2.Attributes[0];
                    dictionary[xmlAttribute.Value] = list;
                }

                result = dictionary;
            }
            catch (Exception)
            {
                result = null;
            }

            return result;
        }

        //NotUsed - For Custom Unit on Selection Screen
        public static void FillUnitDataSingle(UnitModel unit, StageLibraryFloorModel floor)
        {
            var modelTeam = (List<UnitBattleDataModel>) typeof(StageLibraryFloorModel).GetField("_unitList",
                    AccessTools.all)
                ?.GetValue(Singleton<StageController>.Instance.GetStageModel().GetFloor(floor.Sephirah));
            modelTeam?.Add(AddCustomFixUnitModel(Singleton<StageController>.Instance.GetStageModel(), floor._floorModel,
                unit));
        }

        //NotUsed - For Custom Unit on Selection Screen
        private static UnitBattleDataModel AddCustomFixUnitModel(StageModel stage, LibraryFloorModel floor,
            UnitModel unit)
        {
            var lorId = new LorId(ModPack21341Init.PackageId, unit.Id);
            var unitDataModel = new UnitDataModel(lorId, floor.Sephirah, true);
            unitDataModel.SetTemporaryPlayerUnitByBook(lorId);
            unitDataModel.isSephirah = false;
            unitDataModel.SetCustomName(unit.Name);
            unitDataModel.CreateDeckByDeckInfo();
            unitDataModel.forceItemChangeLock = true;
            var unitBattleDataModel = new UnitBattleDataModel(stage, unitDataModel);
            unitBattleDataModel.Init();
            unitDataModel.InitBattleDialogByDefaultBook(new LorId(ModPack21341Init.PackageId, unit.DialogId));
            return unitBattleDataModel;
        }
        
        public static void AddBuffInfo()
        {
            var dictionary =
                typeof(BattleEffectTextsXmlList).GetField("_dictionary", AccessTools.all)
                    ?.GetValue(Singleton<BattleEffectTextsXmlList>.Instance) as Dictionary<string, BattleEffectText>;
            var files = new DirectoryInfo(ModPack21341Init.Path + "/BattleEffectTexts").GetFiles();
            foreach (var t in files)
                using (var stringReader = new StringReader(File.ReadAllText(t.FullName)))
                {
                    var battleEffectTextRoot =
                        (BattleEffectTextRoot) new XmlSerializer(typeof(BattleEffectTextRoot))
                            .Deserialize(stringReader);
                    foreach (var battleEffectText in battleEffectTextRoot.effectTextList)
                        dictionary?.Add(battleEffectText.ID, battleEffectText);
                }
        }